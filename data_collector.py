# data_collector.py (Restored to original format)

import os
import json
import time
from datetime import datetime
from typing import List, Dict, Optional
from pathlib import Path
import uuid
from PIL import Image
from io import BytesIO

from mapcrunch_controller import MapCrunchController
from config import (
    DATA_PATHS,
    BENCHMARK_CONFIG,
    DATA_COLLECTION_CONFIG,
    MAPCRUNCH_OPTIONS,
)


class DataCollector:
    def __init__(self, headless: bool = False, options: Optional[Dict] = None):
        self.controller = MapCrunchController(headless=headless)
        self.data = []
        self.options = options or MAPCRUNCH_OPTIONS
        self.setup_directories()

    def setup_directories(self):
        for path in DATA_PATHS.values():
            if path.endswith("/"):
                Path(path).mkdir(parents=True, exist_ok=True)
            else:
                Path(path).parent.mkdir(parents=True, exist_ok=True)

    def collect_samples(
        self, num_samples: Optional[int] = None, **kwargs
    ) -> List[Dict]:
        # ... (Ê≠§ÂáΩÊï∞‰∏çÂèò) ...
        num_samples = num_samples or BENCHMARK_CONFIG["data_collection_samples"]
        print(f"üöÄ Starting location data collection for {num_samples} samples...")
        self.controller.setup_collection_options(self.options)

        successful_samples = 0
        while successful_samples < num_samples:
            print(f"\nüìç Collecting location {successful_samples + 1}/{num_samples}")
            if not self.controller.click_go_button():
                print("‚ùå Failed to get new location")
                continue

            location_data = self.collect_single_location()
            if location_data:
                self.data.append(location_data)
                successful_samples += 1
                lat, lng = location_data.get("lat"), location_data.get("lng")
                print(
                    f"‚úÖ Location {successful_samples}: {location_data['address']} ({lat:.4f}, {lng:.4f})"
                )
            else:
                print("‚ùå Location collection failed")

        self.save_data()
        return self.data

    def collect_single_location(self) -> Optional[Dict]:
        """Collects a single location using the original, verbose data format."""
        try:
            sample_id = str(uuid.uuid4())
            timestamp = datetime.now().isoformat()

            # 1. Ëé∑ÂèñÂÆûÊó∂ÂùêÊ†á
            current_coords = self.controller.driver.execute_script(
                "if (window.panorama) { return { lat: window.panorama.getPosition().lat(), lng: window.panorama.getPosition().lng() }; } else { return null; }"
            )
            if not current_coords or current_coords.get("lat") is None:
                return None

            # 2. Ëé∑ÂèñÂÆûÊó∂Ê†áËØÜÁ¨¶
            live_identifiers = self.controller.get_live_location_identifiers()
            if not live_identifiers or "error" in live_identifiers:
                return None

            # 3. Ëé∑ÂèñÂú∞ÂùÄ
            address = self.controller.get_current_address()

            # 4. **ÊûÑÂª∫ÊÇ®ÊúüÊúõÁöÑ„ÄÅÊú™Á≤æÁÆÄÁöÑJSONÁªìÊûÑ**
            location_data = {
                "id": sample_id,
                "timestamp": timestamp,
                # ÂµåÂ•óÁöÑ coordinates Â≠óÂÖ∏
                "coordinates": {
                    "lat": current_coords.get("lat"),
                    "lng": current_coords.get("lng"),
                    "source": "panorama_object",
                },
                # È°∂Â±ÇÁöÑ lat/lng
                "lat": current_coords.get("lat"),
                "lng": current_coords.get("lng"),
                "address": address or "Unknown",
                "source": "panorama_object",
                # ÂµåÂ•óÁöÑ identifiers Â≠óÂÖ∏ (Áé∞Âú®Â°´ÂÖÖÁöÑÊòØÂÆûÊó∂Êï∞ÊçÆ)
                "identifiers": {
                    "initPanoId": live_identifiers.get("panoId"),  # ÂÆûÊó∂PanoID
                    "permLink": live_identifiers.get("permLink"),  # ÂÆûÊó∂ÈìæÊé•
                    # ‰øùÁïôÊóßÂ≠óÊÆµÔºå‰ΩÜÂ°´ÂÖÖÊñ∞Êï∞ÊçÆÊàñÁïôÁ©∫
                    "initString": live_identifiers.get("urlString"),
                    "locationString": address,
                    "url": live_identifiers.get("permLink"),
                },
                # È°∂Â±ÇÁöÑÈìæÊé•Â≠óÊÆµ
                "url": live_identifiers.get("permLink"),
                "init_string": live_identifiers.get("urlString"),
                "pano_id": live_identifiers.get("panoId"),
                "perm_link": live_identifiers.get("permLink"),
                "collection_options": self.options.copy(),
            }

            # ‰øùÂ≠òÁº©Áï•Âõæ
            if DATA_COLLECTION_CONFIG.get("save_thumbnails", True):
                thumbnail_path = self.save_thumbnail(sample_id)
                if thumbnail_path:
                    location_data["thumbnail_path"] = thumbnail_path
                    location_data["has_thumbnail"] = True
                else:
                    location_data["has_thumbnail"] = False

            return location_data

        except Exception as e:
            print(f"‚ùå Error in collect_single_location: {e}")
            return None

    # ... (save_thumbnail, save_data Á≠âÂÖ∂‰ªñÂáΩÊï∞‰øùÊåÅ‰∏çÂèò) ...
    def save_thumbnail(self, sample_id: str) -> Optional[str]:
        try:
            screenshot_bytes = self.controller.take_street_view_screenshot()
            if not screenshot_bytes:
                return None
            image = Image.open(BytesIO(screenshot_bytes))
            thumbnail_size = DATA_COLLECTION_CONFIG.get("thumbnail_size", (320, 240))
            image.thumbnail(thumbnail_size, Image.Resampling.LANCZOS)
            thumbnail_filename = f"{sample_id}.jpg"
            thumbnail_path = os.path.join(DATA_PATHS["thumbnails"], thumbnail_filename)
            if image.mode in ("RGBA", "LA"):
                rgb_image = Image.new("RGB", image.size, (255, 255, 255))
                rgb_image.paste(image, mask=image.split()[-1])
                image = rgb_image
            image.save(thumbnail_path, "JPEG", quality=85)
            return thumbnail_filename
        except Exception:
            return None

    def save_data(self):
        try:
            output_data = {
                "metadata": {"collection_date": datetime.now().isoformat()},
                "samples": self.data,
            }
            with open(DATA_PATHS["golden_labels"], "w") as f:
                json.dump(output_data, f, indent=2)
            print(f"\nüíæ Location data saved to {DATA_PATHS['golden_labels']}")
        except Exception as e:
            print(f"‚ùå Error saving data: {e}")

    def close(self):
        self.controller.close()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()
